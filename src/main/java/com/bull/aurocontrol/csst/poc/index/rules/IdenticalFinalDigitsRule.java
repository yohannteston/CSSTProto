package com.bull.aurocontrol.csst.poc.index.rules;import com.bull.aurocontrol.csst.poc.Flight;/** * IdenticalAttributesRule. *  * @author pcantalo */public class IdenticalFinalDigitsRule  {      short n = 0;    /**     * ATC flight ids cannot end with n or more identical digits.     *      * @param flightPair the flightPair to check     * @return true or false     */    public boolean check(final Flight f1,  final Flight f2) {        boolean success = true;//        if (f1.getCfn().equals("003") && f2.getCfn().equals("2203")) {//            System.out.println("rule check");//        }        String atcFlightId1 = f1.getAtcFlightId();        String atcFlightId2 = f2.getAtcFlightId();        if (n == 0) {                        // special final digits 3 rule: the last 3 digits of the ATC flight ids should not be equal (e.g. (102A,4102) is a conflict)            if (atcFlightId1.length() >= 3 && atcFlightId2.length() >= 3) {                char[] charAtcId1 = atcFlightId1.toCharArray();                char[] charAtcId2 = atcFlightId2.toCharArray();                        int length1 = charAtcId1.length;                int length2 = charAtcId2.length;                int lastNumber1 = 0;                int lastNumber2 = 0;                        for (int i1 = length1-1; i1 > 1; i1--) {                                    if (charAtcId1[i1] >= '0' && charAtcId1[i1] <= '9') {                        lastNumber1 = i1;                        break;                    }                }                for (int i2 = length2-1; i2 > 1; i2--) {                                    if (charAtcId2[i2] >= '0' && charAtcId2[i2] <= '9') {                        lastNumber2 = i2;                        break;                    }                }                if (lastNumber1 > 0 && lastNumber2 > 0) {                    if (charAtcId1[lastNumber1] == charAtcId2[lastNumber2] && charAtcId1[lastNumber1 - 1] == charAtcId2[lastNumber2 - 1]) {                        success = false;                    }                }            }                            return success;        }                    if (atcFlightId1.length() >= n && atcFlightId2.length() >= n) {            String end1 = atcFlightId1.substring((atcFlightId1.length() - n));            String end2 = atcFlightId2.substring((atcFlightId2.length() - n));            if (isDigitString(end1) && isDigitString(end2)) {                if (end1.equalsIgnoreCase(end2)) {                    success = false;                }            }        }        return success;    }    /**     * Check is given string contains only digits.     *      * @param digitString the string to check     * @return true or false;     */    private static boolean isDigitString(final String digitString) {        boolean isDigitString = true;        char[] caracs = digitString.toCharArray();        for (char c : caracs) {            if (!Character.isDigit(c)) {                isDigitString = false;                break;            }        }        return isDigitString;    }   }
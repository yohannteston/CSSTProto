package com.bull.aurocontrol.csst.poc.index.rules;import java.util.Arrays;import com.bull.aurocontrol.csst.poc.Flight;/** * ParallelCharactersRule. *  * @author pcantalo */public class ParallelCharactersRule {    short n = 0;    /**     * ATC flight ids cannot contain n or more same characters at the same positions.     *      * @param flightPair the flightPair to check     * @return true or false     */        public boolean check(final Flight f1,  final Flight f2) {        boolean success = true;//        if (f1.getCfn().equals("006") && f2.getCfn().equals("1064")) {//            System.out.println("rule check");//        }                int nbEqualChar = 0;        String stringAtcFlightId1 = f1.getAtcFlightId();        String stringAtcFlightId2 = f2.getAtcFlightId();                String shortestId = stringAtcFlightId1;        String longestId = stringAtcFlightId2;                if (stringAtcFlightId1.length() > stringAtcFlightId2.length()) {            shortestId = longestId;            longestId = stringAtcFlightId1;        }                        char[] shortFlightId = shortestId.toCharArray();        char[] longFlightId = longestId.toCharArray();                int shortLength = shortFlightId.length;        int longLength = longFlightId.length;        if (n == 0) {             // ParallelCharacters 3 except in length 3v3 then ParallelCharacters 2            int nbParaChar = 3;            if (shortLength == 3 && longLength == 3) {                nbParaChar = 2;            }            for (int i = 0; i < shortLength && success; i++) {                if (shortFlightId[i] == longFlightId[i]) {                    nbEqualChar++;                    if (nbEqualChar >= nbParaChar) {                        return false;                    }                }            }            // Identical final 2 chars             if (shortLength > 1) {                if (shortFlightId[shortLength-1] == longFlightId[longLength-1] && shortFlightId[shortLength-2] == longFlightId[longLength-2]) {                    return false;                }                            }            if (shortLength > 2 && longLength > 3) {                            // check length 3v4 3v5 4v4 4v5 5v5                                // first character + last character equal + one more character in common                if (shortFlightId[0] == longFlightId[0] && shortFlightId[shortLength-1] == longFlightId[longLength-1]) {                    if (shortLength == 4 && longLength == 4) {                        if (shortFlightId[1] == longFlightId[2] || shortFlightId[2] == longFlightId[1]) return false;                                               // other combinations have been checked by para 3 or identical final 2                    } else if (shortLength == 3 && longLength == 4) {                        if (shortFlightId[1] == longFlightId[2] || shortFlightId[1] == longFlightId[1]) return false;                                               // other combinations have been checked by para 3 or identical final 2                    } else {                        for (int shortI = 1; shortI < shortLength - 1; shortI++) {                            for (int longI = 1; longI < longLength - 1; longI++) {                                if (shortFlightId[shortI] == longFlightId[longI]) return false;                                                   }                        }                    }                                    }                                // first+second character equal + one more letter in common                // in length 3v4 in flightid1 and flightid2 end on a letter then also conflict when only first 2 characters are equal                if (shortFlightId[0] == longFlightId[0] && shortFlightId[1] == longFlightId[1]) {                    if (shortLength == 4 && longLength == 4) {                        if (shortFlightId[2] == longFlightId[3] && shortFlightId[2] >= 'A' && shortFlightId[2] <= 'Z') return false;                        if (shortFlightId[3] == longFlightId[2] && shortFlightId[3] >= 'A' && shortFlightId[3] <= 'Z') return false;                                           } else if (shortLength == 3 && longLength == 4) {                        if (shortFlightId[2] >= 'A' && shortFlightId[2] <= 'Z' && longFlightId[3] >= 'A' && longFlightId[3] <= 'Z') return false;                     } else {                        // remaining combinations to check here length 3v5 4v5 5v5                         // for length 5 letters can only occur at position 4 and 5                        if (shortLength == 3) {                            if (shortFlightId[2] == longFlightId[3] && shortFlightId[2] >= 'A' && shortFlightId[2] <= 'Z') return false;                                                                                } else {                                                  if (shortFlightId[shortLength - 1] == longFlightId[longLength - 2] && shortFlightId[shortLength - 1] >= 'A' && shortFlightId[shortLength - 1] <= 'Z') return false;                            if (shortFlightId[shortLength - 2] == longFlightId[longLength - 1] && shortFlightId[shortLength - 2] >= 'A' && shortFlightId[shortLength - 2] <= 'Z') return false;                        }                    }                                    }                return success;                                            }            if (shortLength == 3 && longLength == 3) {                return success;                                            }            if (shortLength == 2 && longLength > 2) {                                          if(longestId.indexOf(shortestId.substring(0,2))>=0) {                    //  this is not a frequent case so we can be a bit slower and  but use clean java instead of using performance optimal code                    success = false;                                                                   }                            }            if (shortLength == 2 && longLength == 2) {                // conflict when first character equal or last character equal                if (shortFlightId[0] == longFlightId[0] || shortFlightId[1] == longFlightId[1]) success = false;                                                               }            if (shortLength == 1) {                         if (shortFlightId[0] == longFlightId[0] || shortFlightId[0] == longFlightId[longLength - 1]) success = false;                                                               }            return success;                                        }        for (int i = 0; i < shortLength && success; i++) {            if (shortFlightId[i] == longFlightId[i]) {                nbEqualChar++;                if (nbEqualChar >= n) {                    success = false;                    if (shortLength > 3 && n == 2 && nbEqualChar == 2 && shortFlightId[1] == longFlightId[1]) {                        if (shortFlightId[2] == longFlightId[2]) {                            success = true;                        }                    }                }            }        }        return success;    }}